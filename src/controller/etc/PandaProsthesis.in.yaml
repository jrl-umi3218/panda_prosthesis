---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: true
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: false
# Where to look for state libraries
StatesLibraries:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@"
# Where to look for state files
StatesFiles:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@/data"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@/data"
# If true, state factory will be more verbose
VerboseStateFactory: false
# Additional robots to load
robots:
  panda_tibia:
    module: PandaProsthesis::Tibia
# General constraints, always on
constraints:
- type: contact
- type: dynamics
  robot: panda_femur
  damper: [0.1, 0.01, 0.5]
- type: dynamics
  robot: panda_tibia
  damper: [0.1, 0.01, 0.5]
# Collision constraint
collisions:
- type: collision
  robot: panda_tibia
  useMinimal: true
- type: collision
  r1: panda_femur
  r2: panda_tibia
  collisions:
    - body1: femur
      body2: tibia


# Initial set of contacts
contacts: []
# Implement some additional text states
states:
  GoHorizontal::Femur:
    base: GoRelative
    robot: panda_femur
    surface: FemurHead
    stiffness: 5
    weight: 100
    target:
      translation: [0.5, -0.3, 0.5]
      rotation: [0.0, -3.14, 1.57]
  GoHorizontal::Tibia:
    base: GoHorizontal::Femur
    robot: panda_tibia
    surface: TibiaHead
    target:
      translation: [0.5, -0.3, 0.5]
      rotation: [0.0, -3.14, 1.57]
      #rotation: [1.57, 0.0, 1.57]
      #rotation: [0.0, 0.0, 0.0]
      #rotation: [0.0, 0.0, 0.0]
  GoHorizontal::Both:
    base: Parallel
    states: [GoHorizontal::Femur, GoHorizontal::Tibia]
transitions:
- [Initial, OK, GoHorizontal::Both, Auto]
# Initial state
init: Initial
# Store the location of configuration files
ETC_DIR: "@CMAKE_CURRENT_SOURCE_DIR@/etc"
