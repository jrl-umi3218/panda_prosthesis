---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: false
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: true
# Where to look for state libraries
StatesLibraries:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@"
# Where to look for state files
StatesFiles:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@/data"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@/data"
# If true, state factory will be more verbose
VerboseStateFactory: false

# Additional robots to load
robots:
  panda_femur:
    init_pos:
      translation: [0,0,0]
    frames:
      - name: FemurHead
        parent: panda_link8
        X_p_f:
          translation: [0, 0, 0.15]
          rotation: [0, 0, 0]
  panda_tibia:
    module: PandaProsthesis::Tibia
    frames:
      - name: TibiaHead
        parent: panda_link8
        X_p_f:
          translation: [0, 0, 0.2]
          rotation: [-1.57, 0, 0]
# General constraints, always on
constraints:
- type: contact
- type: kinematics
  robot: panda_femur
  damper: [0.1, 0.01, 0.5]
- type: kinematics
  robot: panda_tibia
  damper: [0.1, 0.01, 0.5]
# Collision constraint
collisions:
- type: collision
  robot: panda_tibia
  useMinimal: true
    # - type: collision
    #   r1: panda_femur
    #   r2: panda_tibia
    #   collisions:
    #     - body1: femur
    #       body2: tibia
    #     - body1: femur
    #       body2: support_tibia
    #     - body1: support_femur
    #       body2: tibia
    #     - body1: support_femur
    #       body2: support_tibia
    #     - body1: panda_link*
    #       body2: panda_link*

ObserverPipelines:
  - name: PandaFemur
    observers:
    - type: Encoder
      config:
        robot: panda_femur
        position: control
        velocity: control
  - name: PandaFemur
    observers:
    - type: Encoder
      config:
        robot: panda_tibia
        position: control
        velocity: control

# Initial set of contacts
contacts: []
# Implement some additional text states
states:
  GoHorizontal::Femur:
    base: GoRelative
    robot: panda_femur
    frame: FemurHead
    stiffness: 5
    weight: 100
      ## If no target is specified this starts from the current robot posture
      #target:
      #  translation: [0.5, -0.3, 0.5]
      #  rotation: [0.0, -3.14, 1.57]
    completion:
      OR:
        - eval: 0.05
        - AND:
            - timeout: 1
            - speed: 0.005
  GoHorizontal::Tibia:
    base: GoHorizontal::Femur
    robot: panda_tibia
    frame: TibiaHead
      #target:
      #  translation: [0.5, -0.3, 0.5]
      #  rotation: [0.0, -3.14, 1.57]

  GoHorizontal::Both::Initial:
    base: Parallel
    states: [GoHorizontal::Femur, GoHorizontal::Tibia]

  InitializePandaFemur:
    base: Initial
    robot: panda_femur
    category: "Initial Configuration"
    default_pose:
      translation: [-0.7, 0, 0]
      rotation: [0, 0, 0]

  InitializePandaTibia:
    base: InitializePandaFemur
    robot: panda_tibia
    default_pose:
      translation: [0.7, 0, 0]
      rotation: [0, 0, 3.14]

  InitializeRobots:
    base: Parallel
    states: [InitializePandaFemur, InitializePandaTibia]

  Simulation:
    base: Meta
    transitions:
    - [InitializeRobots, OK, GoHorizontal::Both::Initial, Auto]

  Real:
    base: Meta
    transitions:
    - [Calibrate, OK, Posture, Auto]

transitions:
  - [ChooseMode, Simulation, Simulation, Auto]
  - [ChooseMode, Real, Calibrate, Auto]

# Initial state
init: ChooseMode
# Store the location of configuration files
ETC_DIR: "@CMAKE_CURRENT_SOURCE_DIR@/etc"
